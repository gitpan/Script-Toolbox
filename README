Script::Toolbox version 0.41 (2012/05/08)
=========================================
- bugfix in Menue() header code

Script::Toolbox version 0.41 (2012/05/07)
=========================================
- I'm sorry for the long time without  any published changes/fixes
- The test suit has still some issues, I'm sorry!
- I can't remember all the changes over the time, I'm sorry again!
- Documentation of Menue() improved
- Menue() has now HEADER and FOOTER lines

Script::Toolbox version 0.31 (2010/07/21)
=========================================
- the test if we have nroff or perldoc install has been changed

Script::Toolbox version 0.30 (2010/05/17)
=========================================
- a new test script (10_Stat.t)  fits with cygwin 

Script::Toolbox version 0.29 (2010/05/06)
=========================================
- a better _dieHook(), will not Log() within eval

Script::Toolbox version 0.28 (2010/05/06)
=========================================
- bug fix in _dieHook()

Script::Toolbox version 0.27 (2010/05/05)
=========================================
- tests adapted to perl, v5.10.0 built for darwin-thread-multi-2level
- fix in signal handling

Script::Toolbox version 0.26 (2009/08/06)
=========================================
- some fixings in POD

Script::Toolbox version 0.25 (2009/08/05)
=========================================
- some bug fixings in test code

Script::Toolbox version 0.24 (2009/08/05)
=========================================
- new time format in Now({diff=><time>}) available
  time may be an epoch seconds value 
  or any string parseable by Time::ParseDate

Script::Toolbox version 0.23 (2008/09/03)
=========================================
- bug fixing in Stat()

Script::Toolbox version 0.22 (2008/06/26)
=========================================
- new parameter Now({diff=><time>})
- bug fixing in test t03_Exit

Script::Toolbox version 0.21 (2008/05/31)
=========================================
- new function KeyMap()- read/write key=>key=>value structures from/to CSV files
- new function Stat()  - like Dir() but with stat() info for each file
- File() has been enhanced to start a callback during read phase

Script::Toolbox version 0.20 (2007/06/12)
=========================================
- test t/6_Table needs no longer eq_array()
- new function Menue() (jump controller and data editor/store)


Script::Toolbox version 0.19
============================
- Now() can handle offsets now

Script::Toolbox version 0.18
============================
- bugfix in SetOpt()


Script::Toolbox version 0.17
============================
- same as 0.16 with additional tests

Script::Toolbox version 0.16
============================
- new function Now()
- new function Now('strftime-format')

Script::Toolbox version 0.13...0.15
===================================
- automatic usage message if any errors on the command line
- Script::Toolbox->new() is valid yet (no command line processing)
- new function System()
- new function File( "| /bin/cat", "Hello World" )

Script::Toolbox version 0.12
============================
0.12 fixes a little mistake in the POD section of Script::Toolbox 
(nothing dangerous :-)

Script::Toolbox version 0.11
============================
use UNIVERSAL qw(isa);
=> cause an error on RedHat. Version 0.11 comes without usage of UNIVERSAL.



Script::Toolbox version 0.10
============================
This version fixes some minor bugs in the 'Usage' message part.
Optionaly options and mandatory options with a default value will
be displayed yet like '[-option <value>] - the description'.


Script::Toolbox version 0.09
============================

This module is intended to make the life a litle bit easier for all of us
who have to write daily a "small" script. Every time the same procedure, 
the script needs some options, a usage message, deals with some files and
directories, needs a logfile and so on. Before you can say knife the "small"
script will become a "big" script.

This module offers:

- Mandatory and optionaly commandline options (based on GetOpt::Long).
- Automated generation of usage messages.
- Automated display of the online manual (-help).
- Simple read/write of entire files to/from memory.
- Simple read of directory listings.
- Simple logging .
- Automated logging of criticaly exceptions.
- Simple automated formatting of tabular data like CSV or such you can get.
  from selectall_arrayref() and selectall_hashref()  from the DBI module.
- Simple usage of temporary files.

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

A example.pl script demonstrates some of the features.

DEPENDENCIES

This module requires these other modules and libraries:


   IO::File
   IO::Dir
   File::stat;
   Data::Dumper;
   Fatal
   UNIVERSAL
   Getopt::Long
   Exporter

	
COPYRIGHT AND LICENCE

Copyright (C) 2002-2004 Matthias Eckardt, eckardt & braun GmbH

matthias.eckardt@link-up.de
http://www.link-up.de

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

